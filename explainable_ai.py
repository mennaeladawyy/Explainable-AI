# -*- coding: utf-8 -*-
"""Explainable AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H4sjxow3UxfMA56vgd65VC0cLSoxaxhU
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from xgboost import XGBClassifier

url = "https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data"
cols = ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg',
        'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target']
df = pd.read_csv(url, names=cols)

df

df.replace('?', pd.NA, inplace=True)
df = df.dropna()
df = df.astype(float)

# Binary classification: 0 = no disease, 1 = disease
df['target'] = df['target'].apply(lambda x: 1 if x > 0 else 0)

X = df.drop('target', axis=1)
y = df['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')
model.fit(X_train_scaled, y_train)

pip install lime

"""# **LIME**"""

import lime.lime_tabular
import numpy as np

explainer = lime.lime_tabular.LimeTabularExplainer(
    training_data=np.array(X_train_scaled),
    feature_names=X.columns,
    class_names=['No Disease', 'Disease'],
    mode='classification'
)
i = 5
exp = explainer.explain_instance(X_test_scaled[i], model.predict_proba)
exp.show_in_notebook()

for i in [0, 5, 10]:
    exp = explainer.explain_instance(X_test_scaled[i], model.predict_proba)
    exp.show_in_notebook()

fig = exp.as_pyplot_figure()
fig.suptitle(f"LIME Explanation for Instance {i}", fontsize=16)

"""# **SHAP**"""

import shap

explainer = shap.Explainer(model, X_train_scaled)
shap_values = explainer(X_test_scaled)

shap.summary_plot(shap_values, X_test, plot_type='bar')

shap.plots.force(shap_values[5])

shap.summary_plot(shap_values, X_test, plot_type='dot')

shap.dependence_plot("oldpeak", shap_values.values, X_test, interaction_index="sex")

import shap
shap.initjs()

shap.force_plot(
    shap_values[0].base_values,
    shap_values[0].values,
    X_test.iloc[0],
    matplotlib=True
)

import shap

explainer = shap.Explainer(model, X_train_scaled, feature_names=X.columns)
shap_values = explainer(X_test_scaled)

shap.plots.heatmap(shap_values)

"""# **PDP**"""

from sklearn.inspection import PartialDependenceDisplay

PartialDependenceDisplay.from_estimator(
    model, X_test_scaled, features=[0, 3, 9], feature_names=X.columns, kind="average"
)

PartialDependenceDisplay.from_estimator(
    model, X_test_scaled, features=[(0, 3)], feature_names=X.columns
)